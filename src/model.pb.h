// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class cvpoint;
class cvsize;
class param;
class config;

// ===================================================================

class cvpoint : public ::google::protobuf::Message {
 public:
  cvpoint();
  virtual ~cvpoint();

  cvpoint(const cvpoint& from);

  inline cvpoint& operator=(const cvpoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cvpoint& default_instance();

  void Swap(cvpoint* other);

  // implements Message ----------------------------------------------

  cvpoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cvpoint& from);
  void MergeFrom(const cvpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:model.cvpoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static cvpoint* default_instance_;
};
// -------------------------------------------------------------------

class cvsize : public ::google::protobuf::Message {
 public:
  cvsize();
  virtual ~cvsize();

  cvsize(const cvsize& from);

  inline cvsize& operator=(const cvsize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cvsize& default_instance();

  void Swap(cvsize* other);

  // implements Message ----------------------------------------------

  cvsize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cvsize& from);
  void MergeFrom(const cvsize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:model.cvsize)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static cvsize* default_instance_;
};
// -------------------------------------------------------------------

class param : public ::google::protobuf::Message {
 public:
  param();
  virtual ~param();

  param(const param& from);

  inline param& operator=(const param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const param& default_instance();

  void Swap(param* other);

  // implements Message ----------------------------------------------

  param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const param& from);
  void MergeFrom(const param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alias = 1;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 1;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional string proto = 2;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 2;
  inline const ::std::string& proto() const;
  inline void set_proto(const ::std::string& value);
  inline void set_proto(const char* value);
  inline void set_proto(const char* value, size_t size);
  inline ::std::string* mutable_proto();
  inline ::std::string* release_proto();
  inline void set_allocated_proto(::std::string* proto);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // repeated .model.cvpoint pts = 4;
  inline int pts_size() const;
  inline void clear_pts();
  static const int kPtsFieldNumber = 4;
  inline const ::model::cvpoint& pts(int index) const;
  inline ::model::cvpoint* mutable_pts(int index);
  inline ::model::cvpoint* add_pts();
  inline const ::google::protobuf::RepeatedPtrField< ::model::cvpoint >&
      pts() const;
  inline ::google::protobuf::RepeatedPtrField< ::model::cvpoint >*
      mutable_pts();

  // optional .model.cvsize size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline const ::model::cvsize& size() const;
  inline ::model::cvsize* mutable_size();
  inline ::model::cvsize* release_size();
  inline void set_allocated_size(::model::cvsize* size);

  // optional double bias = 6;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 6;
  inline double bias() const;
  inline void set_bias(double value);

  // optional double scale = 7;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 7;
  inline double scale() const;
  inline void set_scale(double value);

  // optional string info = 8;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 8;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:model.param)
 private:
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_proto();
  inline void clear_has_proto();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* alias_;
  ::std::string* proto_;
  ::std::string* model_;
  ::google::protobuf::RepeatedPtrField< ::model::cvpoint > pts_;
  ::model::cvsize* size_;
  double bias_;
  double scale_;
  ::std::string* info_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static param* default_instance_;
};
// -------------------------------------------------------------------

class config : public ::google::protobuf::Message {
 public:
  config();
  virtual ~config();

  config(const config& from);

  inline config& operator=(const config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const config& default_instance();

  void Swap(config* other);

  // implements Message ----------------------------------------------

  config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const config& from);
  void MergeFrom(const config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .model.param params = 1;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 1;
  inline const ::model::param& params(int index) const;
  inline ::model::param* mutable_params(int index);
  inline ::model::param* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::model::param >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::model::param >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:model.config)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::model::param > params_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static config* default_instance_;
};
// ===================================================================


// ===================================================================

// cvpoint

// optional float x = 1;
inline bool cvpoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cvpoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cvpoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cvpoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float cvpoint::x() const {
  // @@protoc_insertion_point(field_get:model.cvpoint.x)
  return x_;
}
inline void cvpoint::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:model.cvpoint.x)
}

// optional float y = 2;
inline bool cvpoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cvpoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cvpoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cvpoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float cvpoint::y() const {
  // @@protoc_insertion_point(field_get:model.cvpoint.y)
  return y_;
}
inline void cvpoint::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:model.cvpoint.y)
}

// -------------------------------------------------------------------

// cvsize

// optional int32 width = 1;
inline bool cvsize::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cvsize::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cvsize::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cvsize::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 cvsize::width() const {
  // @@protoc_insertion_point(field_get:model.cvsize.width)
  return width_;
}
inline void cvsize::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:model.cvsize.width)
}

// optional int32 height = 2;
inline bool cvsize::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cvsize::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cvsize::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cvsize::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 cvsize::height() const {
  // @@protoc_insertion_point(field_get:model.cvsize.height)
  return height_;
}
inline void cvsize::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:model.cvsize.height)
}

// -------------------------------------------------------------------

// param

// optional string alias = 1;
inline bool param::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void param::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void param::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void param::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& param::alias() const {
  // @@protoc_insertion_point(field_get:model.param.alias)
  return *alias_;
}
inline void param::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:model.param.alias)
}
inline void param::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:model.param.alias)
}
inline void param::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.param.alias)
}
inline ::std::string* param::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:model.param.alias)
  return alias_;
}
inline ::std::string* param::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void param::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:model.param.alias)
}

// optional string proto = 2;
inline bool param::has_proto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void param::set_has_proto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void param::clear_has_proto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void param::clear_proto() {
  if (proto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_->clear();
  }
  clear_has_proto();
}
inline const ::std::string& param::proto() const {
  // @@protoc_insertion_point(field_get:model.param.proto)
  return *proto_;
}
inline void param::set_proto(const ::std::string& value) {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  proto_->assign(value);
  // @@protoc_insertion_point(field_set:model.param.proto)
}
inline void param::set_proto(const char* value) {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  proto_->assign(value);
  // @@protoc_insertion_point(field_set_char:model.param.proto)
}
inline void param::set_proto(const char* value, size_t size) {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  proto_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.param.proto)
}
inline ::std::string* param::mutable_proto() {
  set_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:model.param.proto)
  return proto_;
}
inline ::std::string* param::release_proto() {
  clear_has_proto();
  if (proto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proto_;
    proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void param::set_allocated_proto(::std::string* proto) {
  if (proto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proto_;
  }
  if (proto) {
    set_has_proto();
    proto_ = proto;
  } else {
    clear_has_proto();
    proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:model.param.proto)
}

// optional string model = 3;
inline bool param::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void param::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void param::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void param::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& param::model() const {
  // @@protoc_insertion_point(field_get:model.param.model)
  return *model_;
}
inline void param::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:model.param.model)
}
inline void param::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:model.param.model)
}
inline void param::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.param.model)
}
inline ::std::string* param::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:model.param.model)
  return model_;
}
inline ::std::string* param::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void param::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:model.param.model)
}

// repeated .model.cvpoint pts = 4;
inline int param::pts_size() const {
  return pts_.size();
}
inline void param::clear_pts() {
  pts_.Clear();
}
inline const ::model::cvpoint& param::pts(int index) const {
  // @@protoc_insertion_point(field_get:model.param.pts)
  return pts_.Get(index);
}
inline ::model::cvpoint* param::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:model.param.pts)
  return pts_.Mutable(index);
}
inline ::model::cvpoint* param::add_pts() {
  // @@protoc_insertion_point(field_add:model.param.pts)
  return pts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::model::cvpoint >&
param::pts() const {
  // @@protoc_insertion_point(field_list:model.param.pts)
  return pts_;
}
inline ::google::protobuf::RepeatedPtrField< ::model::cvpoint >*
param::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:model.param.pts)
  return &pts_;
}

// optional .model.cvsize size = 5;
inline bool param::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void param::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void param::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void param::clear_size() {
  if (size_ != NULL) size_->::model::cvsize::Clear();
  clear_has_size();
}
inline const ::model::cvsize& param::size() const {
  // @@protoc_insertion_point(field_get:model.param.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::model::cvsize* param::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::model::cvsize;
  // @@protoc_insertion_point(field_mutable:model.param.size)
  return size_;
}
inline ::model::cvsize* param::release_size() {
  clear_has_size();
  ::model::cvsize* temp = size_;
  size_ = NULL;
  return temp;
}
inline void param::set_allocated_size(::model::cvsize* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:model.param.size)
}

// optional double bias = 6;
inline bool param::has_bias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void param::set_has_bias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void param::clear_has_bias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void param::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline double param::bias() const {
  // @@protoc_insertion_point(field_get:model.param.bias)
  return bias_;
}
inline void param::set_bias(double value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:model.param.bias)
}

// optional double scale = 7;
inline bool param::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void param::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void param::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void param::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline double param::scale() const {
  // @@protoc_insertion_point(field_get:model.param.scale)
  return scale_;
}
inline void param::set_scale(double value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:model.param.scale)
}

// optional string info = 8;
inline bool param::has_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void param::set_has_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void param::clear_has_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void param::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& param::info() const {
  // @@protoc_insertion_point(field_get:model.param.info)
  return *info_;
}
inline void param::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:model.param.info)
}
inline void param::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:model.param.info)
}
inline void param::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.param.info)
}
inline ::std::string* param::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:model.param.info)
  return info_;
}
inline ::std::string* param::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void param::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:model.param.info)
}

// -------------------------------------------------------------------

// config

// repeated .model.param params = 1;
inline int config::params_size() const {
  return params_.size();
}
inline void config::clear_params() {
  params_.Clear();
}
inline const ::model::param& config::params(int index) const {
  // @@protoc_insertion_point(field_get:model.config.params)
  return params_.Get(index);
}
inline ::model::param* config::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:model.config.params)
  return params_.Mutable(index);
}
inline ::model::param* config::add_params() {
  // @@protoc_insertion_point(field_add:model.config.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::model::param >&
config::params() const {
  // @@protoc_insertion_point(field_list:model.config.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::model::param >*
config::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:model.config.params)
  return &params_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
